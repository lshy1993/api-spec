openapi: 3.0.0
info:
  title: Genshin Quiz API
  description: API for Genshin Impact Quiz Application
  version: 1.0.0
  contact:
    name: API Support
    email: support@genshinquiz.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.moelink.com
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: postRegisterUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      summary: Login user
      operationId: postLoginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          description: Invalid credentials
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/forgot-password:
    post:
      summary: Request password reset
      operationId: postForgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Password reset email sent
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /questions:
    get:
      summary: Get all questions
      operationId: getQuestions
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: category
          in: query
          schema:
            $ref: "#/components/schemas/QuestionCategory"
        - name: difficulty
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/QuestionDifficulty"
        - name: query
          in: query
          schema:
            type: string
        - name: language
          in: query
          schema:
            type: array
            items:
              type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortDesc
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: List of questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
                  total:
                    type: integer
                required:
                  - questions
                  - total
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create a new question
      operationId: postCreateQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionWithAnswer"
      responses:
        "201":
          description: Question created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionWithAnswer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /questions/{id}:
    get:
      summary: Get question by ID
      operationId: getQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Question details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update question
      operationId: updateQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionWithAnswer"
      responses:
        "200":
          description: Question updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionWithAnswer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete question
      operationId: deleteQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Question deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /exams:
    get:
      summary: Get all exams
      operationId: getExams
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: category
          in: query
          schema:
            $ref: "#/components/schemas/QuestionCategory"
        - name: difficulty
          in: query
          schema:
            $ref: "#/components/schemas/QuestionDifficulty"
        - name: query
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortDesc
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: List of exams
          content:
            application/json:
              schema:
                type: object
                properties:
                  exams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Exam"
                  total:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new exam
      operationId: postCreateExam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exam"
      responses:
        "201":
          description: Exam created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /exams/{id}:
    get:
      summary: Get exam by ID
      operationId: getExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Exam details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update exam
      operationId: updateExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exam"
      responses:
        "200":
          description: Exam updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete exam
      operationId: deleteExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Exam deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /votes:
    get:
      summary: Get all votes
      operationId: getVotes
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: type
          in: query
          schema:
            type: string
            enum: ["all", "available", "expired"]
        - name: query
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortDesc
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: 投票列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vote"
                  total:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create new vote
      operationId: postCreateVote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vote"
      responses:
        "201":
          description: 投票创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /votes/{id}:
    get:
      summary: 获取投票详情（含当前结果）
      operationId: getVote
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: 投票详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /votes/{id}/vote:
    post:
      summary: 投票
      operationId: postVote
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                anonymous:
                  type: boolean
                  description: "是否匿名投票"
              required:
                - option_ids
      responses:
        "200":
          description: 投票成功
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "b3b6c1e2-7e2a-4c1a-9e2a-1c2b3d4e5f6a"
        nickname:
          type: string
          example: "Traveler"
        avatar_url:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        country:
          type: string
          example: "CN"
        language:
          type: string
          example: "zh"
        ip:
          type: string
          format: ipv4
          example: "192.168.1.1"
        total_answers:
          type: integer
          example: 100
        correct_answers:
          type: integer
          example: 80
        questions_created:
          type: integer
          example: 5
        votes:
          type: integer
          example: 12
        registered_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        last_login_at:
          type: string
          format: date-time
          example: "2023-10-10T09:00:00Z"
      required:
        - uuid
        - nickname
        - avatar_url
        - country
        - ip
        - total_answers
        - correct_answers
        - questions_created
        - votes
        - registered_at
        - last_login_at

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          $ref: "#/components/schemas/User"
      required:
        - token
        - user

    Exam:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        public:
          type: boolean
        title:
          type: string
          example: "Genshin Characters Exam"
        description:
          type: string
          example: "Test your knowledge about Genshin Impact characters"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/QuestionCategory"
        difficulty:
          $ref: "#/components/schemas/QuestionDifficulty"
          example: "medium"
        questions:
          type: array
          items:
            type: object
            properties:
              question_id:
                type: string
                format: uuid
                description: 题目ID
              order_index:
                type: integer
                description: 在本测验中的顺序
              points:
                type: integer
                description: 本题分值
            required:
              - question_id
        time_limit:
          type: integer
          description: "Time limit in seconds"
          example: 300
        created_by:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - public
        - title
        - category
        - difficulty
        - questions
        - created_by
        - created_at
        - updated_at

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        public:
          type: boolean
          description: "是否公开可见"
        solved:
          type: boolean
          description: "是否已经通过了"
        likeStatus:
          type: integer
          enum: [1, 0, -1]
          description: "点赞状态，1=已点赞，-1=已点踩，0=未操作"
        question_type:
          $ref: "#/components/schemas/QuestionType"
        category:
          $ref: "#/components/schemas/QuestionCategory"
        difficulty:
          $ref: "#/components/schemas/QuestionDifficulty"
        languages:
          type: array
          items:
            type: string
          example: ["en", "zh", "jp"]
          description: 支持的多语言列表
        question_text:
          type: string
          example: "Which character is the Anemo Archon?"
        options:
          type: array
          items:
            $ref: "#/components/schemas/QuestionOption"
        explanation:
          type: string
          example: "Venti is the Anemo Archon, also known as Barbatos"
        answer_count:
          type: integer
          example: 150
          description: 总答题人数
        correct_count:
          type: integer
          example: 100
          description: 总答对人数
        likes:
          type: integer
          example: 25
          description: 点赞数
        created_by:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - public
        - question_text
        - question_type
        - category
        - difficulty
        - options
        - languages
        - created_by
        - created_at

    QuestionOption:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [text, image]
          description: 选项类型
        text:
          type: object
          description: 选项文本
          additionalProperties:
            type: string
        image:
          type: string
          format: uri
          description: 选项图片URL
        is_answer:
          type: boolean
          description: 是否为正确答案
        count:
          type: integer
          description: 选中次数
      required:
        - id
        - type

    QuestionWithAnswer:
      type: object
      properties:
        public:
          type: boolean
        question_type:
          $ref: "#/components/schemas/QuestionType"
        category:
          $ref: "#/components/schemas/QuestionCategory"
        difficulty:
          $ref: "#/components/schemas/QuestionDifficulty"
        options:
          type: array
          items:
            $ref: "#/components/schemas/QuestionOption"
          description: 问题的选项
        question_text:
          type: object
          description: 多语言题干
          additionalProperties:
            type: string
        explanation:
          type: object
          description: 多语言解释
          additionalProperties:
            type: string
      required:
        [
          "public",
          "question_type",
          "category",
          "difficulty",
          "question_text",
          "options",
          "translations",
        ]

    QuestionType:
      type: string
      description: 题目类型
      enum:
        - single_choice
        - multiple_choice
        - true_false
      example: single_choice

    QuestionCategory:
      type: string
      description: 题目分类
      enum:
        - character
        - weapon
        - artifact
        - lore
        - gameplay
        - world
        - combat
        - music
        - statistics
        - fun
        - other
      example: character

    QuestionDifficulty:
      type: string
      description: 难度等级
      enum:
        - easy
        - medium
        - hard
      example: medium

    Vote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        public:
          type: boolean
        title:
          type: string
        description:
          type: string
        category:
          $ref: "#/components/schemas/QuestionCategory"
        tags:
          type: array
          items:
            type: string
        start_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        expired:
          type: boolean
          description: "投票是否已过期"
        voted_options:
          type: object
          additionalProperties:
            type: integer
            description: "该选项被当前用户投了多少票"
          description: "当前用户已投票的选项及票数，key为选项ID"
        votes_per_user:
          type: integer
          default: 1
          description: "每个用户最多可投票数"
        votes_per_option:
          type: integer
          default: 1
          description: "每个选项的最大可投票数，0表示无限制"
        options:
          type: array
          items:
            $ref: "#/components/schemas/VoteOption"
        participants:
          type: integer
          description: "参与投票的用户数"
        total_votes:
          type: integer
          description: "总投票数"
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        likes:
          type: integer
      required:
        - id
        - public
        - title
        - category
        - start_at
        - votes_per_user
        - options
        - expired
        - voted_options
        - created_at
        - created_by

    VoteOption:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [text, image, music]
          description: 选项类型（文本、图片、音乐）
        text:
          type: string
          description: 选项文本
        image_url:
          type: string
          format: uri
          description: 选项图片URL
        music_url:
          type: string
          format: uri
          description: 选项音乐URL
        description:
          type: string
          description: 选项描述
        votes:
          type: integer
      required:
        - id
        - type

    CommonError:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
        message:
          type: string
          example: "The requested resource could not be found"
        code:
          type: integer
          example: 404
      required:
        - error
        - message
        - code

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonError"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonError"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonError"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonError"
