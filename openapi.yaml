openapi: 3.0.0
info:
  title: Genshin Quiz API
  description: API for Genshin Impact Quiz Application
  version: 1.0.0
  contact:
    name: API Support
    email: support@genshinquiz.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.moelink.com
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          description: Invalid credentials
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/forgot-password:
    post:
      summary: Request password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Password reset email sent
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /questions:
    get:
      summary: Get all questions
      operationId: getQuestions
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          schema:
            $ref: "#/components/schemas/QuestionCategory"
        - name: difficulty
          in: query
          schema:
            $ref: "#/components/schemas/QuestionDifficulty"
      responses:
        "200":
          description: List of questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"

  /questions/{id}:
    get:
      summary: Get question by ID
      operationId: getQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Question details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update question
      operationId: updateQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        "200":
          description: Question updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete question
      operationId: deleteQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Question deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /exams:
    get:
      summary: Get all exams
      operationId: getExams
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          schema:
            $ref: "#/components/schemas/QuestionCategory"
        - name: difficulty
          in: query
          schema:
            $ref: "#/components/schemas/QuestionDifficulty"
      responses:
        "200":
          description: List of exams
          content:
            application/json:
              schema:
                type: object
                properties:
                  exams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Exam"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new exam
      operationId: createExam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exam"
      responses:
        "201":
          description: Exam created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /exams/{id}:
    get:
      summary: Get exam by ID
      operationId: getExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Exam details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update exam
      operationId: updateExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exam"
      responses:
        "200":
          description: Exam updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete exam
      operationId: deleteExam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Exam deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "b3b6c1e2-7e2a-4c1a-9e2a-1c2b3d4e5f6a"
        nickname:
          type: string
          example: "Traveler"
        avatar_url:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        country:
          type: string
          example: "CN"
        ip:
          type: string
          format: ipv4
          example: "192.168.1.1"
        total_answers:
          type: integer
          example: 100
        correct_answers:
          type: integer
          example: 80
        questions_created:
          type: integer
          example: 5
        votes:
          type: integer
          example: 12
        registered_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        last_login_at:
          type: string
          format: date-time
          example: "2023-10-10T09:00:00Z"
      required:
        - uuid
        - nickname
        - avatar_url
        - country
        - ip
        - total_answers
        - correct_answers
        - questions_created
        - votes
        - registered_at
        - last_login_at

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        uuid:
          type: string
          format: uuid
      required:
        - token
        - uuid

    Exam:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          example: "Genshin Characters Exam"
        description:
          type: string
          example: "Test your knowledge about Genshin Impact characters"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/QuestionCategory"
          example: ["character", "lore"]
        difficulty:
          $ref: "#/components/schemas/QuestionDifficulty"
          example: "medium"
        questions:
          type: array
          items:
            type: object
            properties:
              question_id:
                type: string
                format: uuid
                description: 题目ID
              order_index:
                type: integer
                description: 在本测验中的顺序
              points:
                type: integer
                description: 本题分值
            required:
              - question_id
        time_limit:
          type: integer
          description: "Time limit in seconds"
          example: 300
        created_by:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - title
        - category
        - difficulty
        - questions
        - created_by
        - created_at
        - updated_at

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        question_text:
          type: string
          example: "Which character is the Anemo Archon?"
        question_type:
          $ref: "#/components/schemas/QuestionType"
        category:
          $ref: "#/components/schemas/QuestionCategory"
        difficulty:
          $ref: "#/components/schemas/QuestionDifficulty"
        options:
          type: object
          properties:
            type:
              type: string
              enum: [text, image]
              description: 选项类型
            text:
              type: string
              description: 选项文本
            image:
              type: string
              format: uri
              description: 选项图片URL
          required:
            - type
          example: ["Venti", "Zhongli", "Raiden Shogun", "Nahida"]
        explanation:
          type: string
          example: "Venti is the Anemo Archon, also known as Barbatos"
        created_by:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - question_text
        - question_type
        - category
        - difficulty
        - options
        - created_by
        - created_at

    QuestionType:
      type: string
      description: 题目类型
      enum:
        - single_choice
        - multiple_choice
        - true_false
      example: single_choice

    QuestionCategory:
      type: string
      description: 题目分类
      enum:
        - character
        - weapon
        - artifact
        - lore
        - gameplay
        - world
        - combat
        - music
        - statistics
        - fun
        - other
      example: character

    QuestionDifficulty:
      type: string
      description: 难度等级
      enum:
        - easy
        - medium
        - hard
      example: medium

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
        message:
          type: string
          example: "The requested resource could not be found"
        code:
          type: integer
          example: 404
      required:
        - error
        - message
        - code

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
